#include <cstdlib>
#include <string>
#include <iostream>
#include <xmlrpc-c/girerr.hpp>
#include <xmlrpc-c/base.hpp>
#include <xmlrpc-c/client_simple.hpp>
#include <curses.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

#define xmax 100
#define ymax 100
int playerNum =0;
int gameNum=0;
 int playerLocations[8];
int mxmax = 0, mymax = 0;
char maze[xmax][ymax];
/////////////////////////////////
void initialize() {
	initscr();
	raw();
	noecho();
	nonl();
	intrflush( stdscr, FALSE );
	keypad( stdscr, TRUE );
}

void finalize() { 
	endwin();
}
void delscreen(SCREEN *screen);

void loadMaze(const char *mazeFileName) {
    int X = 0;
    int Y = 0;
    FILE *fp = NULL;
   
    for (Y = 0; Y <= ymax; Y++) {
        for (X = 0; X <= xmax; X++) {
            maze[X][Y] = ' ';
        }
}
	X = 0;
	Y = 0;
    if ((fp = fopen(mazeFileName, "r")) == NULL) {
        fprintf(stderr, "\n\tERROR ");
        perror(mazeFileName);
        fprintf(stderr, "\n");
        exit(EXIT_FAILURE);
    }
    else {
        while ((!feof(fp)) && (Y <= ymax)) {
            X = 0;
            while ((!feof(fp)) && (X <= xmax)) {
                char temp;
                fscanf(fp, "%c", &temp);
                if (temp != '\n') {
                    maze[Y][X++] = temp;
                }
                else break;
            }
	mxmax = X;
	mymax = Y;
            Y++;
        }
        fclose(fp);
    }
}

void printMaze(){
	for(int i = 0; i < xmax; i++){
		for(int j = 0; j < ymax; j++){
			mvprintw( i, j, "%c", maze[i][j]);
		}
	}
	refresh();
}

int x = 10, y= 20, x2 = 15, y2 = 25;
bool a = true;



void move(){ // move the other  players
wmove( stdscr, x, y );
waddch( stdscr, ACS_DIAMOND );
int p= gameNum;	
if(p==1){
		wmove( stdscr, playerLocations[2], playerLocations[2] );
		waddch( stdscr, ACS_BLOCK );
		wmove( stdscr, playerLocations[4], playerLocations[5] );
		waddch( stdscr, ACS_LANTERN );
		wmove( stdscr, playerLocations[6], playerLocations[7] );
		waddch( stdscr, ACS_PLUS );

}
else if( p==2){
wmove( stdscr, playerLocations[0], playerLocations[1] );
		waddch( stdscr, ACS_BLOCK );
		wmove( stdscr, playerLocations[4], playerLocations[5] );
		waddch( stdscr, ACS_LANTERN );
		wmove( stdscr, playerLocations[6], playerLocations[7] );
		waddch( stdscr, ACS_PLUS  );
}

else if( p==3){
wmove( stdscr, playerLocations[0], playerLocations[1] );
		waddch( stdscr, ACS_BLOCK );
		wmove( stdscr, playerLocations[2], playerLocations[3] );
		waddch( stdscr, ACS_LANTERN  );
		wmove( stdscr, playerLocations[6], playerLocations[7] );
		waddch( stdscr, ACS_PLUS );
}
else if( p==4){
wmove( stdscr, playerLocations[0], playerLocations[1] );
		waddch( stdscr, ACS_BLOCK );
		wmove( stdscr, playerLocations[2], playerLocations[3] );
		waddch( stdscr, ACS_LANTERN );
		wmove( stdscr, playerLocations[4], playerLocations[5] );
		waddch( stdscr,ACS_PLUS  );
}



}



///////////////////////////////////

main(int argc, char **) {

    if (argc-1 > 0) {
        cerr << "This program has no arguments" << endl;
        exit(1);
    }

    try {


        xmlrpc_c::clientSimple myClient;
        xmlrpc_c::value result;
        string const serverUrl("http://localhost:8080/RPC2");
        string const methodName("server.joinGame");
        myClient.call(serverUrl, methodName, "ii", &result, 5, 7);
        
        xmlrpc_c::value_array array1(result);
        vector<xmlrpc_c::value> const param1Value(array1.vectorValueValue());
        int const player_value = xmlrpc_c::value_int(param1Value[0]);
	int const game_value = xmlrpc_c::value_double(param1Value[1]);  
	playerNum=player_value;
	gameNum= game_value;
	cout << "The game number is " << player_value << " the playerNumber is " << game_value <<  endl;

int ch;
	initialize();
loadMaze("hello.txt");
	while (a) {
		
		curs_set(0);
		wclear( stdscr );
		printMaze();
		move(); // move the other players
		

		wrefresh( stdscr );

		ch = wgetch( stdscr); // look for key input to move
		switch (ch) {
			case KEY_UP: 
				wrefresh( stdscr );
				mvaddch( y, x-1, ACS_DIAMOND );
				x -= 1;
				break;
			case KEY_DOWN:
				wrefresh( stdscr );
				mvaddch( y, x+1, ACS_DIAMOND );
				x += 1;
				break;
			case KEY_LEFT:
				wrefresh( stdscr );
				mvaddch( y-1, x, ACS_DIAMOND );
				y -= 1;
				break;			
			case KEY_RIGHT:
				wrefresh( stdscr );
				mvaddch( y+1, x, ACS_DIAMOND );
				y += 1;
				break;
			case KEY_BACKSPACE:
				a = false;
				wrefresh( stdscr );
				finalize();
				break;
			default:
				break;
				
		}
	xmlrpc_c::value result1;
 	 myClient.call(serverUrl, "server.getLocations", "iiii", &result1, x,y,playerNum,gameNum);	
	xmlrpc_c::value_array array2(result1);
        vector<xmlrpc_c::value> const param2Value(array2.vectorValueValue());
int const x1 = xmlrpc_c::value_int(param2Value[0]); // get other players locations from return array
int const x2 = xmlrpc_c::value_int(param2Value[1]);
int const x3 = xmlrpc_c::value_int(param2Value[2]);
int const x4 = xmlrpc_c::value_int(param2Value[3]);
int const x5 = xmlrpc_c::value_int(param2Value[4]);
int const x6 = xmlrpc_c::value_int(param2Value[5]);
int const x7 = xmlrpc_c::value_int(param2Value[6]);
int const x8 = xmlrpc_c::value_int(param2Value[7]);
playerLocations[0]=x1;
playerLocations[1]=x2;
playerLocations[2]=x3;
playerLocations[3]=x4;
playerLocations[4]=x5;
playerLocations[5]=x6;
playerLocations[6]=x7;
playerLocations[7]=x8;
			

		if(!a) {
			endwin();
			break;
		}
	}
	
	finalize();

		cout<<endl;



    } catch (exception const& e) {
        cerr << "Client threw error: " << e.what() << endl;
    } catch (...) {
        cerr << "Client threw unexpected error." << endl;
    }

    return 0;
}
